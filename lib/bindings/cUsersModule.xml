<?xml version="1.0" encoding="UTF-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">	
	<binding id="cProfilePanel" extends="layout.cDocumentEditor#cDocumentEditorPanelFields">
		<content>
			<xul:vbox flex="1">
				<xul:cmessageinfo anonid="message" />
				<xul:hbox anonid="action-bar">
					<xul:button anonid="save_properties" oncommand="saveProperties()" label="${transui:m.uixul.bo.doceditor.button.save,ucf,attr}" image="{IconsBase}/small/save.png"/>
					<xul:button anonid="reset_properties" oncommand="resetProperties()" label="${transui:m.uixul.bo.doceditor.button.canceledit,ucf,attr}" image="{IconsBase}/small/undo.png"/>
				</xul:hbox>
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xbl:children />
				</xul:scrollbox>
			</xul:vbox>
		</content>
		
		<implementation>	
			<field name="mProfiles">null</field>
			<field name="mDatas">null</field>
			
			<constructor><![CDATA[
				
			]]></constructor>
			
			<method name="registerProfile">
				<parameter name="bindingProfile" />
				<body><![CDATA[
					if (this.mProfiles == null) 
					{
						this.mProfiles = {};
						this.mFields = {};
					}
					var name = bindingProfile.getAttribute('name');
					this.mProfiles[name] = bindingProfile;
					for (var subname in bindingProfile.fields)
					{
						this.mFields[name + '/' + subname] = bindingProfile.fields[subname];
					}
									
					if (this.mDatas !== null && (name in this.mDatas))
					{
						bindingProfile.setValues(this.mDatas[name]);
					}
				]]></body>
			</method>
			
			<method name="getInitializeParameters">
				<body><![CDATA[
					return {
						action: 'LoadProfiles',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo
					};
				]]></body>
			</method>
			
			<method name="fireInitializeComplete">
				<parameter name="result" />
				<body><![CDATA[			
					if (result.status == 'OK')
					{														
						this.mDocumentId = result.contents.id;
						this.mLang = result.contents.lang;
						this.mRevision = result.contents.documentversion;
						this.mDatas = result.contents.sections;
						this.modified = false;
						this.error = false;
						if (this.getElementsByTagName('profile').length == 0)
						{
							var sn = result.contents.sectionlist;
							for (var i = 0; i < sn.length; i++)
							{
								var ps = document.createElement('profile');
								ps.setAttribute('name', sn[i]);
								this.appendChild(ps);
							}
						}
						else if (this.mProfiles != null)
						{
							for (var name in this.mDatas)
							{
								if (name in this.mProfiles)
								{
									this.mProfiles[name].setValues(this.mDatas[name]);
								}
							}
						}
						this.collapseContentZone(false);
						this.updateCommandsUI();
						this.mInitialized = true;
						this.fireEvent("panelInitializeComplete");
						this.gotoTop();
					}
					else
					{
						this.showErrorMessage(result.contents.errorMessage);
						this.setInitialValues(fields, {});
						this.modified = false;
						this.error = true;
						
						this.collapseContentZone(true);						
						this.mInitialized = true;
					}
				]]></body>
			</method>
			
			<method name="onCloseEditor">
				<body><![CDATA[	
					for (var name in this.mProfiles)
					{
						this.mProfiles[name].setValues({"id":0});
					}				
				]]></body>
			</method>
												
			<method name="saveProperties">
				<body><![CDATA[
					this.lockCommandsUI();
					this.showTextMessage("${transui:m.uixul.bo.doceditor.Update-in-progress,ucf,js}");
					this.documentEditor.executeServerAction('profile', 'SaveProfiles');
				]]></body>
			</method>
			
			<method name="getSaveProfilesParameters">
				<body><![CDATA[
					var sections = {};
					for (var name in this.mDatas)
					{
						if (name in this.mProfiles)
						{
							sections[name] = this.mProfiles[name].getValues();
						}
					}
							
					return {
						action: 'SaveProfiles',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo,
						sections: wCore.stringifyJSON(sections)
					};
				]]></body>
			</method>	
			
			<method name="fireSaveProfilesComplete">
				<parameter name="result" />
				<body><![CDATA[			
					this.fireInitializeComplete(result);
				]]></body>
			</method>				
										
		</implementation>
	</binding>
	
	<binding id="cUsersProfile">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
		</resources>
		<content>
			<xul:groupbox flex="1">
				<xul:caption label="${transui:m.users.document.usersprofile.document-name,attr,ucf}"/>
				<xul:grid flex="1">
					<xul:columns>
						<xul:column/>
						<xul:column flex="1"/>
					</xul:columns>
					<xul:rows>
						<xul:row anonid="row_titleid">
							<xul:clabel id="users_usersprofile_titleid_label" control="users_usersprofile_titleid" 
								value="${transui:m.users.document.usersprofile.titleid,attr,ucf}">
							</xul:clabel>
							<xul:cfield name="titleid" id="users_usersprofile_titleid" anonid="field_titleid" 
								fieldtype="dropdownlist" listid="modules_users/title"
								shorthelp="${transui:m.users.document.usersprofile.titleid-help,attr}">
							</xul:cfield>
						</xul:row>
						
						<xul:row anonid="row_firstname">
							<xul:clabel id="users_usersprofile_firstname_label" control="users_usersprofile_firstname" 
								value="${transui:m.users.document.usersprofile.firstname,attr,ucf}">
							</xul:clabel>
							<xul:cfield name="firstname" id="users_usersprofile_firstname" anonid="field_firstname" fieldtype="text" 
								shorthelp="${transui:m.users.document.usersprofile.firstname-help,attr}">
							</xul:cfield>
						</xul:row>	
						
						<xul:row anonid="row_lastname">
							<xul:clabel id="users_usersprofile_lastname_label" control="users_usersprofile_lastname" 
								value="${transui:m.users.document.usersprofile.lastname,attr,ucf}">
							</xul:clabel>
							<xul:cfield name="lastname" id="users_usersprofile_lastname" anonid="field_lastname" fieldtype="text" 
								shorthelp="${transui:m.users.document.usersprofile.lastname-help,attr}">
							</xul:cfield>
						</xul:row>	
						
						<xul:row anonid="row_displayname">
							<xul:clabel id="users_usersprofile_displayname_label" control="users_usersprofile_displayname" 
								value="${transui:m.users.document.usersprofile.displayname,attr,ucf}">
							</xul:clabel>
							<xul:cfield name="displayname" id="users_usersprofile_displayname" anonid="field_displayname" fieldtype="boolean" 
								shorthelp="${transui:m.users.document.usersprofile.displayname-help,attr}">
							</xul:cfield>
						</xul:row>
						
						<xul:row anonid="row_lcid">
							<xul:clabel id="users_usersprofile_lcid_label" control="users_usersprofile_lcid" 
								value="${transui:m.users.document.usersprofile.lcid,attr,ucf}">
							</xul:clabel>
							<xul:cfield name="lcid" id="users_usersprofile_lcid" anonid="field_lcid" 
								fieldtype="dropdownlist" listid="modules_users/lcid"
								shorthelp="${transui:m.users.document.usersprofile.lcid-help,attr}">
							</xul:cfield>
						</xul:row>	
												
						<xul:row anonid="row_timezone">
							<xul:clabel id="users_usersprofile_timezone_label" control="users_usersprofile_timezone" 
								value="${transui:m.users.document.usersprofile.timezone,attr,ucf}">
							</xul:clabel>
							<xul:cfield name="timezone" id="users_usersprofile_timezone" anonid="field_timezone" 
								fieldtype="dropdownlist" listid="modules_users/timezone"
								shorthelp="${transui:m.users.document.usersprofile.timezone-help,attr}">
							</xul:cfield>
						</xul:row>	
						
						<xul:row anonid="row_dateformat">
							<xul:clabel id="users_usersprofile_dateformat_label" control="users_usersprofile_dateformat" 
								value="${transui:m.users.document.usersprofile.dateformat,attr,ucf}">
							</xul:clabel>
							<xul:hbox>
								<xul:cfield name="dateformat" id="users_usersprofile_dateformat" anonid="field_dateformat" 
									fieldtype="text" shorthelp="${transui:m.users.document.usersprofile.dateformat-help,attr}" />
								<xul:cfield anonid="dateformat-list" fieldtype="dropdownlist" listid="modules_users/dateformat"
									hidehelp="true" />
							</xul:hbox>							
						</xul:row>	
						
						<xul:row anonid="row_datetimeformat">
							<xul:clabel id="users_usersprofile_datetimeformat_label" control="users_usersprofile_datetimeformat" 
								value="${transui:m.users.document.usersprofile.datetimeformat,attr,ucf}">
							</xul:clabel>
							<xul:hbox>
								<xul:cfield name="datetimeformat" id="users_usersprofile_datetimeformat" anonid="field_datetimeformat" 
									fieldtype="text" shorthelp="${transui:m.users.document.usersprofile.datetimeformat-help,attr}" />
								<xul:cfield anonid="datetimeformat-list" fieldtype="dropdownlist" listid="modules_users/datetimeformat"
									hidehelp="true" />
							</xul:hbox>		
						</xul:row>
						
						<xul:row anonid="row_birthday">
							<xul:clabel id="users_usersprofile_birthday_label" control="users_usersprofile_birthday" 
								value="${transui:m.users.document.usersprofile.birthday,attr,ucf}">
							</xul:clabel>
							<xul:cfield name="birthday" id="users_usersprofile_birthday" anonid="field_birthday" 
								fieldtype="datetime" hidetime="true" hidehelp="true" >
							</xul:cfield>
						</xul:row>					
						
						<xul:row anonid="row_location">
							<xul:clabel id="users_usersprofile_location_label" control="users_usersprofile_location" 
								value="${transui:m.users.document.usersprofile.location,attr,ucf}">
							</xul:clabel>
							<xul:cfield name="location" id="users_usersprofile_location" anonid="field_location" fieldtype="text" 
								shorthelp="${transui:m.users.document.usersprofile.location-help,attr}">
							</xul:cfield>
						</xul:row>
						
						<xul:row anonid="row_personnalwebsiteurl">
							<xul:clabel id="users_usersprofile_personnalwebsiteurl_label" control="users_usersprofile_personnalwebsiteurl" 
								value="${transui:m.users.document.usersprofile.personnalwebsiteurl,attr,ucf}">
							</xul:clabel>
							<xul:cfield name="personnalwebsiteurl" id="users_usersprofile_personnalwebsiteurl" anonid="field_personnalwebsiteurl"
								fieldtype="text" hidehelp="true">
								<xul:cconstraint name="url" parameter="true" />
							</xul:cfield>
						</xul:row>
					</xul:rows>
				</xul:grid>
				<children />
			</xul:groupbox>			
		</content>
		
		<implementation>
			<field name="mFields" />
			<field name="mId" />
			
			<constructor><![CDATA[
				this.mFields = null;
				this.mId = null;
				wCore.debug('cUsersProfile.constructor');
				this.parentNode.registerProfile(this);
				
				var me = this;
				var dlist = this.getElementByAnonId('dateformat-list');
				dlist.addEventListener('fieldChanged', function (e) { me.fields.dateformat.value = dlist.value; }, true);
				var dtlist = this.getElementByAnonId('datetimeformat-list');
				dtlist.addEventListener('fieldChanged', function (e) { me.fields.datetimeformat.value = dtlist.value; }, true);
			]]></constructor>
			
			<method name="getElementByAnonId">
				<parameter name="anonId" />
				<body><![CDATA[
					return document.getAnonymousElementByAttribute(this, "anonid", anonId);
				]]></body>
			</method>

			<property name="fields" readonly="true">
				<getter><![CDATA[
					if (this.mFields == null)
					{
						var fieldsNames = ["titleid", "firstname", "lastname", "displayname", "timezone", "dateformat", "datetimeformat", "lcid", "birthday", "location", "personnalwebsiteurl"];
						this.mFields = {};
						var field = null;
						var name = null;
						for (var i = 0; i < fieldsNames.length; i++)
						{
							name = fieldsNames[i];
							field = this.getElementByAnonId('field_' + name);
							this.mFields[name] = field;
						}
					}
					return this.mFields;
				]]></getter>
			</property>	
								
			<method name="setValues">
				<parameter name="values" />
				<body><![CDATA[
					this.getElementByAnonId('dateformat-list').reset();
					this.getElementByAnonId('datetimeformat-list').reset();
				
					this.mId = values.id;
					var fields = this.fields;
					var field = null;				
					for (var name in fields)
					{
						fields[name].setInitialValue((name in values) ? values[name] : '');
					}
				]]></body>
			</method>
			
			<method name="getValues">
				<parameter name="values" />
				<body><![CDATA[
					var values = {"id" : this.mId};
					var fields = this.fields;
					var field = null;
					for (var name in fields)
					{
						if (fields[name].modified)
						{
							var val = fields[name].value;
							values[name] = (val === '') ?  null : val;
						}
					}
					return values;
				]]></body>
			</method>						
		</implementation>
	</binding>
</bindings>
